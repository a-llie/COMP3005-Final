create or replace function set_end_time()
returns TRIGGER as $$
begin
    -- Set the end_time to be one hour after the start_time
    NEW.schedule_end := NEW.schedule_start + INTERVAL '1 hour';
    return NEW;
end;
$$ language plpgsql;

create trigger before_insert_update_schedule
before insert or update on Schedule
for EACH row
execute function set_end_time();


create or replace function set_fee()
returns TRIGGER as $$
begin
    -- Set the end_time to be one hour after the start_time
    NEW.monthly_free := case NEW.membership_type
        when 'Basic' then 50.00
        else 75.00
    end;
    return NEW;
end;
$$ language plpgsql;

create trigger before_insert_update_club_member
before insert or update on Club_Member
for EACH row
execute function set_fee();


insert into Building(num_rooms) values (8);

insert into Equipment (name, room_num, maintenance_date) 
select 
    --generate a random equipment name
    case floor(random() * 8)
        when 0 then 'Treadmill'
        when 1 then 'Barbell'
        when 2 then 'Stationary Bike'
        when 3 then 'Dumbbells'
        when 4 then 'Elliptical Trainer'
        when 5 then 'Bench Press'
        when 6 then 'Rowing Machine'
        ELSE 'Leg Press Machine'
    end as name,
    --generate a random room number between 1 and 8
    floor(random() * 8) + 1 as room_num,
    --generate a random maintenance date between today and 90 days ahead
    NOW() + (random() * (NOW()+'90 days' - NOW())) as maintenance_date
from generate_series(1, 20) as i;


insert into Employee (first_name, last_name, is_trainer) values
('John', 'Doe', true),
('Alice', 'Smith', true),
('Michael', 'Johnson', true),
('Emma', 'Brown', true),
('Christopher', 'Davis', true),
('Olivia', 'Miller', false),
('James', 'Wilson', false),
('Sophia', 'Moore', false),
('William', 'Taylor', false),
('Isabella', 'Anderson', false);



insert into Club_Member (username, membership_type, first_name, last_name, user_weight, height, weight_goal) 
select
    --generate a random username
    'user' || floor(random() * 1000) as username,
    --generate a random monthly fee of either 50 or 75
    case floor(random() * 2)
        when 0 then 'Basic'
        else 'Pro'
    end as membership_type,
    --generate a random first name
    case floor(random() * 10)
        when 0 then 'Alice'
        when 1 then 'Bob'
        when 2 then 'Charlie'
        when 3 then 'David'
        when 4 then 'Eve'
        when 5 then 'Frank'
        when 6 then 'Grace'
        when 7 then 'Heidi'
        when 8 then 'Ivan'
        when 9 then 'Judy'
        else 'Eve'
    end as first_name,
    --generate a random last name
    case floor(random() * 10)
        when 0 then 'Smith'
        when 1 then 'Johnson'
        when 2 then 'Brown'
        when 3 then 'Davis'
        when 4 then 'Miller'
        when 5 then 'Wilson'
        when 6 then 'Moore'
        when 7 then 'Taylor'
        when 8 then 'Anderson'
        when 9 then 'Thomas'
        else 'Wilson'
    end as last_name,
    --generate a random weight between 50 and 100
    floor(random() * 51) + 50 as user_weight,
    --generate a random height between 150 and 200
    floor(random() * 51) + 150 as height,
    --generate a random weight goal between 50 and 100
    floor(random() * 51) + 45 as weight_goal
from generate_series(1, 20) as i
on CONFLICT (username) DO NOTHING;

insert into Schedule (employee_id, schedule_start) 
select
    -- Select a random trainer_id from 1 to 5 (assuming there are 5 trainers)
    floor(random() * 5) + 1 as employee_id,
    -- Select a random timestamp from today to 90 days ahead between hours of 8:00 and 18:00
    NOW() + (random() * (NOW()+'90 days' - NOW())) as schedule_start
from generate_series(1, 20) as i;

insert into Class(room_num, trainer_id, class_time, capacity, registered, exercise_type)
select 
    -- Select room number randomly from 1 to 8
    floor(random() * 8) + 1 as room_num,
    -- Select trainer_id randomly from 1 to 5 (assuming there are 5 trainers)
    floor(random() * 5) + 1 as trainer_id,
    -- Select a random timestamp from 90 days ago to 90 days ahead
    ('2024-01-01 08:00:27')::timestamp + (random() * (NOW()+'90 days' - NOW())) + '30 days' as class_time,
    -- Set capacity to a random number between 10 and 30
    CASE floor(random() * 2)
        when 0 then 1
        else floor(random() * 21) + 10
    end as capacity,
    0 as registered,
    -- Choose exercise type randomly
    CASE floor(random() * 3)
        when 0 then 'Cardio'
        when 1 then 'Strength'
        ELSE 'Yoga'
    end as exercise_type
from generate_series(1, 25) as i
where not exists -- no overlapping room_num, trainer_id, and class_time
(select * from Class c where c.room_num = room_num and c.trainer_id = trainer_id and c.class_time = class_time);

DO $$
declare
    i integer;
    participants_count integer;
    chosen_class_id integer;
begin
    -- add 25 random participants to classes
    for i in 1..25 loop
        select c.class_id into chosen_class_id
        from Class c
        where c.capacity > c.registered  -- respect capacity constraint
        order by random()
        limit 1;

        IF chosen_class_id is not null then
            insert into Exercise (duration, exercise_date, exercise_type, class_id, username)
            select 
                60,
                c.class_time,
                c.exercise_type,
                c.class_id,
                (
                    select username 
                    from Club_Member
                    order by random() 
                    limit 1
                ) as username
            from Class c
            where c.class_id = chosen_class_id
            on CONFLICT (class_id, username) DO NOTHING;

            -- update registered count
            update Class
            set registered = (
                select COUNT(*)
                from Exercise
                where Exercise.class_id = chosen_class_id  
            )
            where Class.class_id = chosen_class_id; 
        end if;
    end loop;
end $$;